---
title: "Pr√°tica Avan√ßada de Data Science e Visualization"
author: "Laborat√≥rios"
format:
  insper-revealjs:
    hash-type: number
execute:
  freeze: true
engine: knitr
---

## Ol√°, tudo bem?

Meu papel nessa disciplina ser√° ajudar no aprendizado da parte dos c√≥digos etc.

```{r}
#| include: false
library(tidyverse)
```


::: incremental

Tamb√©m posso dar pitacos nas apresenta√ß√µes e salv√°-los em situa√ß√µes de desespero (atendimentos extras).

:::

## Sobre como posso ajudar

Coisas que eu conhe√ßo bastante:

- R / tidyverse
- extens√µes do ggplot2
- htmlwidgets
- Shiny
- git/github
- Quarto

Coisas que eu conhe√ßo um pouco:

- Python / pandas
- seaborn, plotnine

## Uso de IA nas nossas atividades


```{r}
#| fig-align: center
#| out-width: 90%
knitr::include_graphics("img/aias.png")
```


## Din√¢mica

Nesse lab, nosso objetivo ser√° construir solu√ß√µes de transforma√ß√£o e visualiza√ß√£o de dados.

-   Os grupos s√£o os que montamos para o trabalho final. Se os grupos ainda n√£o existirem, podemos usar provisioramente os do trimestre passado.

-   As tarefas ser√£o imitar um gr√°fico que eu montei para voc√™s usando ggplot2. Eu mostrarei apenas a imagem. Posso dar dicas no meio do caminho.

-   O grupo que conseguir fazer o gr√°fico primeiro ganhar√° **pr√™mios**.

## Base olist

Utilizaremos a base de dados da **olist**, para que voc√™s possam aproveitar os trabalhos nas atividades integradoras.

::: incremental

-   Para garantir que as visualiza√ß√µes funcionam, disponibilizei uma base que eu montei (pode conter erros) [no material dos labs](https://github.com/padsInsper/202531-padsv/releases/tag/dados).

-   A base est√° no formato `.parquet` (usar pacote [`{arrow}`](https://arrow.apache.org/docs/r/)) ou `pd.read_parquet()` (precisa do `pyarrow` ou equivalente instalado)

:::

## Base olist {.smaller}

```{r}
#| echo: true
olist <- arrow::read_parquet(
  "https://github.com/padsInsper/202433-padsv/releases/download/dados/olist_items.parquet"
)

dplyr::glimpse(olist)
```


## Base olist {.smaller}

```{python}
#| echo: true
#| eval: false

import pandas as pd

olist = pd.read_parquet(
  "https://github.com/padsInsper/202433-padsv/releases/download/dados/olist_items.parquet"
)

olist.info()
```



---

#### Exerc√≠cio 01 üç™

::: panel-tabset

#### Resultado esperado

```{r}
#| fig-align: center
#| out-width: 100%
knitr::include_graphics("img/ex01.png")
```

#### Dicas

- Usar a coluna `types`

- Estudar a fun√ß√£o `theme()`

- As `geom_label()` ficam na metade da altura da barra.

- Descubra a cor usando o *color picker* do seu navegador. 

#### C√≥digo

```{r}
#| eval: false
#| echo: false

library(ggplot2)

olist |>
  dplyr::group_by(types) |> 
  dplyr::summarise(n = dplyr::n()) 

olist |>
  dplyr::count(types) |>
  dplyr::mutate(types = forcats::fct_reorder(types, n)) |>
  dplyr::filter(n > 100) |>
  dplyr::mutate(n = n/1000) |>
  ggplot(aes(x = n, y = types)) +
  geom_col(fill = "#8ae3d7", width = .5) +
  geom_label(aes(label = round(n, 2), x = n/2)) +
  theme_dark(16) +
  labs(
    x = "Quantidade\n(milhares)",
    y = "Forma de pagamento",
    title = "Formas de pagamento mais comuns",
    subtitle = "Considerando tipos com mais de 100 observa√ß√µes",
    caption = "Fonte: Olist"
  ) +
  theme(
    panel.background = element_rect(fill = "gray20"),
    plot.background = element_rect(fill = "gray10"),
    text = element_text(family = "serif", colour = "white"),
    axis.text = element_text(family = "serif", colour = "white")
  )

```


```{python}
#| eval: false
#| echo: false

from plotnine import *
import pandas as pd
import numpy as np

olist = r.olist

contagens = olist.value_counts('types').reset_index(name = "n")
contagens = contagens.query('n > 100')

contagens_list = contagens.set_index('types').index.tolist()

contagens = contagens.copy()

contagens['n'] = contagens['n'] / 1000
contagens['lab'] = np.round(contagens['n'], 2)

contagens['types'] = pd.Categorical(
  contagens['types'], categories=contagens_list[::-1]
)

(
  ggplot(contagens, aes(x = 'types', y = 'n'))
  + geom_col(fill = "#8ae3d7", width = .5)
  + geom_label(aes(label = 'lab', y = 'n / 2'))
  + coord_flip()
  + theme_dark(12)
  + labs(
    x = "Quantidade\n(milhares)",
    y = "Forma de pagamento",
    title = "Formas de pagamento mais comuns",
    subtitle = "Considerando tipos com mais de 100 observa√ß√µes",
    caption = "Fonte: Olist"
  )
  + theme(
    panel_background = element_rect(fill = "#222222"),
    plot_background = element_rect(fill = "#111111"),
    text = element_text(family = "serif", colour = "white"),
    axis_text = element_text(family = "serif", colour = "white"),
    panel_grid_minor = element_blank()
  )
)


```


```{python}
import pandas as pd

import matplotlib.pyplot as plt



df = r.olist


df.info()

if 'types' in df.columns and 'payment_value' in df.columns:

  payment_summary = df.groupby('types')['product_id'].count().sort_values(ascending=True)



  payment_summary = payment_summary.loc[payment_summary > 100]

  fig, ax = plt.subplots(figsize=(10, 5))

  bars = ax.barh(payment_summary.index, payment_summary.values / 1000, color="lightblue")



  for bar, value in zip(bars, payment_summary.values / 1000):

    plt.text(bar.get_width() / 2,

     bar.get_y() + bar.get_height() / 2, 

     f"{value:.2f}",

     va='center', ha='center', 

     fontsize=10,

     bbox=dict(facecolor='white', edgecolor='black', boxstyle='round,pad=0.2'))



  ax.set_xlabel("Quantidade (milhares)", color='white', loc="center", labelpad=15)

  ax.set_ylabel("Forma de Pagamento", color='white', loc="center", labelpad=15)



  ax.set_title("Formas de pagamento mais comuns\nConsiderando tipos com mais de 100 observa√ß√µes",

         color='white', loc='left')



  ax.set_facecolor("#222222")

  fig.patch.set_facecolor("#222222")

  ax.spines['bottom'].set_color('white')

  ax.spines['left'].set_color('white')

  ax.tick_params(colors='white')



  plt.text(ax.get_xlim()[1], -0.5, "Fonte: Olist", color="white", fontsize=10, ha="right")

  plt.show()

else:

  print("Colunas n√£o foram encontradas")


```

```{python}
# Contar quantas vezes cada forma de pagamento aparece e converter para milhares

contagem = df["types"].value_counts() / 1000



# Filtrando as formas de pagamento com mais de 100 observa√ß√µes

contagem = contagem[contagem * 1000 > 100]


import seaborn as sns
# Configura√ß√£o do estilo escuro

sns.set_theme(style="darkgrid", palette="muted")



# Criando a figura

fig, ax = plt.subplots(figsize=(12, 6))



# Criando o gr√°fico de barras horizontal com mais espa√ßo entre as barras

bars = ax.barh(contagem.index, contagem.values, color="paleturquoise", height=0.7) # Ajuste 'height' para mais espa√ßo



# Adicionando r√≥tulos nas barras (valores em milhares) no meio das barras

for i, v in enumerate(contagem.values):

  ax.text(v / 2, i, f"{v:.2f}", color="black", fontsize=12, ha="center", va="center",

      bbox=dict(facecolor="white", edgecolor="black"), fontname="DejaVu Serif")



# Ajustes do gr√°fico

ax.set_xlabel("Quantidade (milhares)", fontsize=14, fontname="DejaVu Serif")

ax.set_ylabel("Forma de pagamento", fontsize=14, fontname="DejaVu Serif", labelpad=20) # Aumenta o espa√ßo entre o eixo Y e as barras

ax.set_title("Formas de pagamento mais comuns \n Considerando tipos com mais de 100 observa√ß√µes",

       fontsize=16, fontweight="bold", fontname="DejaVu Serif", loc="left", color="white") # Ajuste para t√≠tulo branco

ax.invert_yaxis()



# Ajustando o limite do eixo X para come√ßar em -2

ax.set_xlim(left=-2)



# Adicionando a fonte no canto inferior direito

plt.figtext(0.95, 0.02, "Fonte: Olist", fontsize=12, ha="right", color="black", fontname="DejaVu Serif")



# Alterando o fundo do gr√°fico (somente a √°rea do gr√°fico)

fig.patch.set_facecolor("black")

ax.set_facecolor("gray")



# Remover bordas e ajustar cores

ax.spines["top"].set_visible(False)

ax.spines["right"].set_visible(False)

ax.spines["left"].set_color("white") # Ajuste para bordas brancas

ax.spines["bottom"].set_color("white") # Ajuste para bordas brancas

ax.xaxis.label.set_color("white") # Ajuste para r√≥tulo branco

ax.yaxis.label.set_color("white") # Ajuste para r√≥tulo branco

ax.title.set_color("white") # Ajuste para t√≠tulo branco

ax.tick_params(axis="both", colors="white") # Ajuste para ticks brancos



# Exibir o gr√°fico

plt.show()


```

```{r}
dados_pagamento <- data.frame(
  forma_pagamento = c("credit_card", "boleto", "credit_card,voucher", "debit_card", "voucher"),
  quantidade = c(83.95, 22.87, 2.49, 1.69, 1.66),
  types = c("main", "alternative", "main", "alternative", "main")  # Adicionando a coluna types
)

# Criar o gr√°fico
ggplot(dados_pagamento, aes(x = reorder(forma_pagamento, quantidade), y = quantidade)) +
  geom_bar(stat = "identity", width = 0.6, fill = "#00CED1") +  # Todas as barras em verde √°gua
  geom_label(aes(label = scales::comma(quantidade), y = quantidade / 2), 
             vjust = 0.5,  # Coloca o r√≥tulo no centro da barra verticalmente
             hjust = 0.5,  # Centraliza o r√≥tulo horizontalmente
             size = 3,  # Tamanho dos r√≥tulos
             color = "black", 
             fontface = "bold",  # Texto em negrito
             label.size = 0.5,  # Tamanho da borda
             label.padding = unit(0.3, "lines"),  # Espa√ßamento interno da caixa
             label.r = unit(0.15, "lines"),  # Arredondar os cantos da caixa
             fill = "white") +  # Cor de fundo da caixa
  coord_flip() +  # Inverter eixos (horizontal)
  theme_minimal() +  # Tema mais clean
  labs(
    title = "Formas de pagamento mais comuns",
    subtitle = "Considerando tipos com mais de 100 observa√ß√µes",
    x = "Forma de pagamento",
    y = "Quantidade (milhares)",
    caption = "Fonte: Olist"
  ) +
  theme(
    text = element_text(size = 14, color = "white"),  # Cor do texto branco
    plot.background = element_rect(fill = "black", color = NA),  # Fundo preto
    panel.background = element_rect(fill = "gray20", color = NA),  # Fundo do grid cinza
    panel.grid.major = element_line(color = "white"),  # Linhas de grid brancas
    panel.grid.minor = element_blank(),  # Remove grades menores
    axis.text = element_text(color = "white"),  # Texto dos eixos branco
    axis.title = element_text(color = "white"),  # T√≠tulos dos eixos branco
    plot.title = element_text(size = 18, face = "bold"),  # T√≠tulo grande e em negrito
    plot.subtitle = element_text(size = 14),  # Subt√≠tulo
    legend.position = "none"  # Remover legenda (n√£o necess√°ria)
  )


```

:::

---

#### Exerc√≠cio 02 üç™üç™

::: panel-tabset

#### Resultado esperado

```{r}
#| fig-align: center
#| out-width: 90%
knitr::include_graphics("img/ex02.png")
```

#### Dicas

- Usar `seller_state` para o estado

- Usar `scale_x_date()`

- Estudar `scale_color_viridis_d()`

- `lubridate::floor_date()` para aproximar datas

- `case_when()` ou `fct_other()` para reclassificar uma vari√°vel categ√≥rica

- filtrar a base para o intervalo de datas entre "2017-01-01" e "2018-07-01"

- devemos contar/agrupar por `data` (m√™s) e `estado`

#### C√≥digo

```{r}
#| eval: false
#| echo: false

olist |>
  dplyr::mutate(
    data = as.Date(order_purchase_timestamp),
    data = lubridate::floor_date(data, "month"),
    estado = forcats::fct_other(
      seller_state,
      keep = c("SP", "RJ"),
      other_level = "Outros"
    )
  ) |>
  dplyr::filter(
    # dplyr::between()
    data >= "2017-01-01",
    data <= "2018-07-01"
  ) |>
  dplyr::count(data, estado) |>
  ggplot() +
  aes(x = data, y = n, colour = estado) +
  geom_line(size = 2) +
  scale_color_viridis_d(begin = .2, end = .8) +
  labs(
    x = "Data",
    y = "Quantidade",
    title = "S√£o Paulo tem mais vendas",
    subtitle = "O que √© esperado, pois a popula√ß√£o √© maior üò¨",
    caption = "Fonte: Olist",
    color = "Estado"
  ) +
  scale_x_date(
    date_breaks = "3 month",
    date_labels = "%b\n%Y"
  ) +
  theme_light(15) +
  theme(
    legend.position = "bottom"
  )

```

```{python}
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates



# Carregar o dataset

olist = pd.read_parquet("https://github.com/padsInsper/202433-padsv/releases/download/dados/olist_items.parquet")

olist

# Filtrar o intervalo de datas entre "2017-01-01" e "2018-07-01"

olist['order_purchase_timestamp'] = pd.to_datetime(olist['order_purchase_timestamp'])

olist_filtered = olist[

  (olist['order_purchase_timestamp'] >= "2017-01-01") & (olist['order_purchase_timestamp'] <= "2018-07-01")

]



# Usar lubridate::floor_date() para aproximar datas (neste caso, arredondar para o in√≠cio do m√™s)

olist_filtered['month'] = olist_filtered['order_purchase_timestamp'].dt.to_period('M').dt.to_timestamp()



# Reclassificar seller_state em categorias "RJ", "SP" e "Outros"

olist_filtered['seller_state_grouped'] = olist_filtered['seller_state'].apply(

  lambda x: x if x in ['RJ', 'SP'] else 'Outros'

)



# Contar/agrupar por data (m√™s) e estado

grouped = olist_filtered.groupby(['month', 'seller_state_grouped']).size().reset_index(name='count')



# Pivotar os dados para o formato necess√°rio para o gr√°fico

pivot_table = grouped.pivot(index='month', columns='seller_state_grouped', values='count').fillna(0)



# Criar o gr√°fico

plt.figure(figsize=(10, 8))



# Plotando as linhas com as cores personalizadas

plt.plot(pivot_table.index, pivot_table['SP'], label='SP', linewidth=2, color='#21908c')

plt.plot(pivot_table.index, pivot_table['RJ'], label='RJ', linewidth=2, color='#414487')

plt.plot(pivot_table.index, pivot_table['Outros'], label='Outros', linewidth=2, color='#7ad151')



# Personalizar o gr√°fico

plt.title("S√£o Paulo tem mais vendas\nO que √© esperado, pois a popula√ß√£o √© maior üòä", fontsize=14, loc='left')

plt.xlabel("Data", fontsize=12)

plt.ylabel("Quantidade", fontsize=12)



# Ajustar o formato do eixo X para mostrar apenas alguns meses

plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%b \n %Y')) # Formato 'mar \n 2017'

plt.gca().xaxis.set_major_locator(mdates.MonthLocator(interval=3)) # Mostra r√≥tulos a cada 3 meses



# Ajustar os r√≥tulos para ficarem retos

plt.xticks(rotation=0)



# Adicionar grid em formato de quadrados (linhas fracas)

plt.grid(True, linestyle='--', linewidth=0.5, alpha=0.3)



# Ajustar o layout

plt.tight_layout()



# Adicionar rodap√© com a fonte dos dados

plt.figtext(0.95, -0.05, "Fonte: Olist", fontsize=10, color="black", ha="right")



# Ajustar a posi√ß√£o da legenda para ficar abaixo do gr√°fico

plt.legend(title='Estado', loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=3)



# Exibir o gr√°fico

plt.show()
```


```{python}
#| eval: false
#| echo: false

from plotnine import *
import pandas as pd
import numpy as np

olist = r.olist

olist['data'] = pd.to_datetime(olist['order_purchase_timestamp'])
olist['data'] = pd.to_datetime(olist['data']).dt.to_period('M')
olist['estado'] = olist['seller_state']

olist['estado'] = np.where(
  olist['estado'].isin(['SP', 'RJ']),
  olist['estado'],
  'Outros'
)

olist['estado'] = pd.Categorical(
  olist['estado'], categories=['SP', 'RJ', 'Outros']
)

olist = olist.query('data >= "2017-01-01" & data <= "2018-07-01"')

contagens = olist.value_counts(['data', 'estado']).reset_index(name = "n")

contagens['data'] = contagens['data'].dt.to_timestamp()


(
  ggplot(contagens, aes(x = 'data', y = 'n', colour = 'estado', group='estado'))
  + geom_line(size = 2)
  + scale_color_cmap_d('viridis') 
  + scale_x_date(date_breaks = '3 month', date_labels = '%b\n%Y')
  + labs(
    x = "Data",
    y = "Quantidade",
    title = "S√£o Paulo tem mais vendas",
    subtitle = "O que √© esperado, pois a popula√ß√£o √© maior üò¨",
    color="Estado",
  )
  + theme_light()
  + theme(
    legend_position = 'bottom'
  )
)
```

:::

---

#### Exerc√≠cio 03 üç™üç™üç™

::: panel-tabset

#### Resultado esperado

```{r}
#| fig-align: center
#| out-width: 90%
knitr::include_graphics("img/ex03.png")
```

#### Dicas

- Usar o pacote `{ggridges}`.

- Para pintar apenas uma categoria, crie uma coluna.

- Para anota√ß√µes no gr√°fico (como "Mediana"), use a fun√ß√£o `annotate()`.

- Para fazer os reais, use a fun√ß√£o `scales::scales_dollar_format()`.

#### C√≥digo

```{r}
#| eval: false
#| echo: false

items_agg <- olist |>
  group_by(product_category_name) |>
  filter(n() > 4000) |>
  ungroup() |>
  filter(product_category_name != "ferramentas_jardim") |>
  mutate(
    product_category_name = stringr::str_replace_all(
      product_category_name, "_", " "
    ),
    product_category_name = stringr::str_to_title(product_category_name),
    product_category_name = fct_reorder(
      product_category_name, price, median
    ),
    relogios = ifelse(
      product_category_name == "Relogios Presentes",
      "destacar", "n√£o destacar"
    )
  )

mediana <- items_agg |>
  summarise(mediana = median(price))

items_agg |>
  ggplot() +
  aes(x = price, y = product_category_name, fill = relogios) +
  ggridges::geom_density_ridges(
    quantile_lines = TRUE,
    quantiles = 2,
    na.rm = FALSE,
    n = 2048,
    show.legend = FALSE
  ) +
  scale_x_continuous(
    limits = c(0, NA),
    labels = scales::dollar_format(prefix = "R$")
  ) +
  coord_cartesian(xlim = c(0, 300)) +
  geom_vline(
    aes(xintercept = mediana),
    data = mediana,
    linetype = 2,
    colour = "red"
  ) +
  scale_fill_manual(
    values = c("#6686e6", "#eaeaea")
  ) +
  theme_minimal() +
  annotate(
    "text",
    x = mediana$mediana,
    y = 0.8,
    hjust = -0.1,
    label = "Mediana",
    colour = "red",
    size = 3
  ) +
  labs(
    x = "Pre√ßo",
    y = "Categoria",
    title = "Rel√≥gios s√£o caros!!"
  ) +
  theme(
    plot.title.position = "plot"
  )
```

:::

---

#### Exerc√≠cio 04 üç™üç™üç™üç™

::: panel-tabset

#### Resultado esperado

```{r}
#| fig-align: center
#| out-width: 90%
knitr::include_graphics("img/ex04.png")
```

#### Dicas

- Fa√ßa a contagem por estado, latitude/longtude do seller e customer

- Filtre para os estados de interesse

- Use `slice_sample()` para pegar 1000 observa√ß√µes.

- Voc√™ pode usar essa semente para ficar reprodut√≠vel: `set.seed(42)`

- Para obter o mapa, usar o pacote `{geobr}`

- Para plotar o mapa, usar a fun√ß√£o `geom_sf()`

- Estamos desenhando CURVAS

- Use facets

#### C√≥digo

```{r}
#| echo: false
#| eval: false

estados <- geobr::read_state()

set.seed(42)
items |>
  dplyr::count(
    seller_state,
    geolocation_lat_seller,
    geolocation_lng_seller,
    geolocation_lat_customer,
    geolocation_lng_customer
  ) |>
  dplyr::filter(seller_state %in% c("SP", "MG", "RJ")) |>
  dplyr::slice_sample(n = 1000) |>
  ggplot() +
  geom_sf(data = estados, fill = "gray95", size = .1) +
  geom_curve(
    mapping = aes(
      x = geolocation_lng_seller,
      y = geolocation_lat_seller,
      xend = geolocation_lng_customer,
      yend = geolocation_lat_customer
    ),
    arrow = arrow(length = unit(0.1, "inches")),
    curvature = .2,
    alpha = .2,
    colour = "royalblue"
  ) +
  facet_wrap(~seller_state, strip.position = "bottom") +
  theme_void(base_size = 16) +
  labs(
    title = "Para onde v√£o as compras?",
    subtitle = "Comparando S√£o Paulo, Minas Gerais e Rio de Janeiro",
    caption = "Fonte: Olist"
  )

```


:::
